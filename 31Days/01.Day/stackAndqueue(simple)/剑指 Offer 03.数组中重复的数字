## 【题目】在一个长度为n的数组里的所有数字都在0~n-1的范围内，数组中某些数字是重复的，但不知道🙅‍♂️有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字。例如，如果输入长度为7的数组{2,3,1,0,2,5,3}，那么对应的输出是重复的数字2或者3。

## 【破解】
首先脑子里的想法是什么呢？想都别想肯定是想着要遍历，没错呀，但是遍历的时候要做什么呢？看下题目是要找重复的元素，那么如何找重复的元素呢？额，就是找出两个一样的，那么遍历到一个的时候怎么知道是不是重复了呢？当然是需要存起来了，那么存的话当然是可以存到一个字典中了。在javascript最简单的是用一个对象了，但是既然es6出了专门的map，我们当然优先使用map了。这种查找的方式当然不是最优的，可是不妨碍我们先把它写出来，然后再进行分析和优化呀。

```javascript
findRepeatNumber = (arr) => {
    const map = new Map();
    for (let i = 0;i < arr.length-1; i++) {
        if (Object.is(map.get(arr[i]),1)) return arr[i];
        map.set(arr[i],1);
    }
    return undefined;
}
```

这段代码没毛病，但是感觉需要引入一个额外的空间还有可以优化的空间。目前来看，时间复杂度是O(n)，但是空间复杂度也是O(n)。能把空间复杂度降下来吗？🤔我们来捋一捋：既然要降低空间复杂度，那我们就不使用额外的空间，题目是要找到重复的数字，在不引入额外空间的情况下，也是不能够存储数字出现次数的情况下完成这个目标，该如何做呢？那我们应该再来看看数组本身能够有哪些操作。其实很容易想到的是排序，排序之后看前后的数字一不一样就可以了。是不是可行呢？我们来实现一下。

```javascript
findRepeatNumber = arr => {
    arr.sort();
    for (let i = 0;i < arr.length-2; i++) {
        if (Object.is(arr[i], arr[i+1])) return arr[i];
    }
    return undefined;
}
```

运行一下，发现也是没问题的。从这段代码来看，我们确实解决了之前的问题，没有引入额外的空间复杂度。但是会发现在时间复杂度上增加了一个排序，而在js里sort方法的实现是利用快排实现的，而快排的时间复杂度是nlog(n)，时间复杂度是增加了，但是这已经不失为是一种好的实现方式了。

我们进阶一步，如果不能修改数组顺序呢？

一维数组的性质：
一维数组在内存中占据连续空间，因此可以根据下标定位对应的元素。
可以对一维数组使用二分法。


